---
description: 
globs: 
alwaysApply: true
---
# TDD with TaskMaster Integration

> **Quick reference for TDD workflow with TaskMaster. For comprehensive testing standards, see [Testing Standards](mdc:docs/testing_standards.md) and [Testing Patterns](mdc:docs/testing_patterns_reference.md).**

## **TaskMaster TDD Workflow**

### **Subtask Implementation Process**
When working on subtasks, follow this TDD-integrated workflow:

1. **Start Subtask** (`set_task_status --id=X.Y --status=in-progress`)
2. **Red Phase**: Write failing tests first
3. **Update Subtask**: Document test creation (`update_subtask --id=X.Y --prompt="RED PHASE: Created failing tests for..."`)
4. **Green Phase**: Implement minimal code to pass tests
5. **Update Subtask**: Document implementation (`update_subtask --id=X.Y --prompt="GREEN PHASE: Implemented minimal solution..."`)
6. **Refactor Phase**: Clean up code while maintaining green tests
7. **Update Subtask**: Document refactoring (`update_subtask --id=X.Y --prompt="REFACTOR PHASE: Enhanced implementation..."`)
8. **Complete Subtask** (`set_task_status --id=X.Y --status=done`)

### **Test Execution Commands**
```bash
# TDD-specific test running
python scripts/test_runner.py red     # Run failing tests (Red phase)
python scripts/test_runner.py green   # Run minimal implementation tests  
python scripts/test_runner.py unit    # Run all unit tests (Refactor phase)
python scripts/test_runner.py coverage # Verify coverage requirements
```

## **Task Completion Criteria**

A task/subtask is only complete when:
1. ✅ All tests written (Red phase)
2. ✅ All tests passing (Green phase)  
3. ✅ Code refactored and optimized (Refactor phase)
4. ✅ Test coverage meets requirements (95%+)
5. ✅ Integration tests verify end-to-end functionality
6. ✅ TaskMaster subtask updated with implementation notes

## **AI Development Integration**

- **Follow TDD principles** from [Testing Standards](mdc:docs/testing_standards.md)
- **Use testing patterns** from [Testing Patterns Reference](mdc:docs/testing_patterns_reference.md)
- **Test project-specific components**: Configuration ([config.py](mdc:src/research_agent_backend/utils/config.py)), Vector Operations ([vector_store.py](mdc:src/research_agent_backend/core/vector_store.py)), CLI Commands ([cli/](mdc:src/research_agent_backend/cli))

**Remember**: If you're not writing tests first, you're not following TDD. Every line of production code should be driven by a failing test.
