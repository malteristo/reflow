---
description: "Guidelines for implementing the Python MCP server using the FastMCP framework. Focuses on tool definition, backend CLI integration, data formatting for Cursor, and configuration. Applies to files in 'src/mcp_server/'."
globs: src/mcp_server/**/*.py
alwaysApply: false
---
# MCP Server Standards (FastMCP)

## Core Requirements

**✅ REQUIRED:**
- **Framework**: `jlowin/fastmcp` Python framework
- **Python 3.10+** with PEP 8 compliance
- **Type hints** on all MCP tools
- **Async/await** patterns for CLI integration

**❌ AVOID:**
- Synchronous blocking operations
- Hard-coded CLI paths
- Unstructured error responses

## MCP Tool Definition

**FastMCP Tool Pattern:**
```python
# ✅ Good: Properly structured MCP tool
from fastmcp import FastMCP

mcp = FastMCP("Research Agent")

@mcp.tool()
async def query_knowledge_base(
    query: str,
    collection_ids: Optional[List[str]] = None,
    document_context: Optional[str] = None
) -> dict:
    """Query knowledge base - implements FR-RQ-003."""
    try:
        result = await invoke_backend_cli([
            "query", query,
            "--collections", ",".join(collection_ids or []),
            "--context", document_context or ""
        ])
        return {"success": True, "data": result}
    except Exception as e:
        return {"success": False, "error": str(e)}

# ❌ Avoid: Missing types, poor error handling
@mcp.tool()
def bad_query(q):
    return subprocess.run(["cli", q]).stdout
```

**Tool Categories:**
```python
# Knowledge Base Operations
@mcp.tool()
async def ingest_documents(folder_path: str, collection_name: str) -> dict:
    """Ingest documents - implements FR-KB-001."""

@mcp.tool()
async def create_collection(name: str, collection_type: str) -> dict:
    """Create collection - implements FR-CM-001."""

@mcp.tool()
async def list_collections() -> dict:
    """List all collections - implements FR-CM-003."""

# Query & Research Operations  
@mcp.tool()
async def search_knowledge(query: str, top_k: int = 5) -> dict:
    """Search with re-ranking - implements FR-RQ-005, FR-RQ-008."""
```

## Backend CLI Integration

**Async CLI Invocation:**
```python
# ✅ Good: Async subprocess with proper error handling
import asyncio
import json

async def invoke_backend_cli(args: List[str]) -> dict:
    """Invoke research-agent-cli with structured output."""
    try:
        process = await asyncio.create_subprocess_exec(
            "research-agent-cli", *args,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        
        stdout, stderr = await process.communicate()
        
        if process.returncode != 0:
            raise CLIError(f"CLI failed: {stderr.decode()}")
            
        return json.loads(stdout.decode())
    except json.JSONDecodeError as e:
        raise CLIError(f"Invalid JSON response: {e}")

# ❌ Avoid: Blocking subprocess
def bad_invoke(args):
    return subprocess.run(args, capture_output=True)
```

**CLI Path Resolution:**
```python
# ✅ Good: Configurable CLI path
class MCPServer:
    def __init__(self, cli_path: str = "research-agent-cli"):
        self.cli_path = cli_path
        
    async def invoke_cli(self, args: List[str]) -> dict:
        process = await asyncio.create_subprocess_exec(
            self.cli_path, *args,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
```

## Response Formatting

**Structured Response Pattern:**
```python
# ✅ Good: Consistent response structure
@dataclass
class MCPResponse:
    success: bool
    data: Optional[dict] = None
    error: Optional[str] = None
    query_feedback: Optional[dict] = None  # FR-RQ-009

# Success response format
{
    "success": true,
    "data": {
        "results": [...],
        "metadata": {...}
    },
    "query_feedback": {
        "status": "success",
        "confidence": 0.85
    }
}

# Error response format  
{
    "success": false,
    "error": "Collection 'docs' not found",
    "details": "Available collections: fundamental, project"
}
```

**Query Refinement Feedback (FR-RQ-009):**
```python
# ✅ Good: Structured feedback for query refinement
async def handle_query_feedback(cli_result: dict) -> dict:
    """Process query refinement feedback from backend."""
    if cli_result.get("status") == "clarification_needed":
        return {
            "success": True,
            "data": cli_result.get("results", []),
            "query_feedback": {
                "status": "clarification_needed",
                "message_to_user": cli_result.get("message_to_user"),
                "suggested_keywords": cli_result.get("suggested_keywords", []),
                "suggested_sections": cli_result.get("suggested_sections", [])
            }
        }
    return {"success": True, "data": cli_result}
```

## Error Handling & Logging

**Comprehensive Error Handling:**
```python
# ✅ Good: Detailed error handling
import logging

logger = logging.getLogger(__name__)

class CLIError(Exception):
    """Backend CLI operation failed."""
    pass

@mcp.tool()
async def robust_tool(param: str) -> dict:
    """Tool with comprehensive error handling."""
    try:
        result = await invoke_backend_cli(["command", param])
        logger.info(f"Tool executed successfully: {param}")
        return {"success": True, "data": result}
    except CLIError as e:
        logger.error(f"CLI error: {e}")
        return {"success": False, "error": str(e)}
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return {"success": False, "error": "Internal server error"}
```

**Logging Standards:**
```python
# ✅ Good: Structured logging
logger.info("MCP tool invoked", extra={
    "tool": "query_knowledge_base",
    "query_length": len(query),
    "collections": len(collection_ids or [])
})

logger.error("Backend CLI failed", extra={
    "command": args,
    "exit_code": process.returncode,
    "stderr": stderr.decode()
})
```

## Configuration Integration

**MCP Server Setup:**
```python
# ✅ Good: Configuration-driven MCP server
from fastmcp import FastMCP
import os

# Load from environment (set in .cursor/mcp.json)
CLI_PATH = os.getenv("RESEARCH_AGENT_CLI_PATH", "research-agent-cli")
LOG_LEVEL = os.getenv("MCP_LOG_LEVEL", "INFO")

mcp = FastMCP("Research Agent")

# Server initialization
if __name__ == "__main__":
    mcp.run()
```

**Environment Variables (in .cursor/mcp.json):**
```json
{
  "mcpServers": {
    "research-agent": {
      "command": "python",
      "args": ["src/mcp_server/server.py"],
      "env": {
        "RESEARCH_AGENT_CLI_PATH": "research-agent-cli",
        "MCP_LOG_LEVEL": "INFO"
      }
    }
  }
}
```

## Tool Organization

**Modular Tool Structure:**
```
src/mcp_server/
├── server.py              # Main FastMCP server
├── tools/
│   ├── knowledge_base.py   # KB management tools
│   ├── query.py           # Search and query tools
│   └── collections.py     # Collection management
├── cli_integration.py     # Backend CLI interface
└── response_formatter.py  # Response standardization
```

**Tool Registration Pattern:**
```python
# ✅ Good: Organized tool registration
from fastmcp import FastMCP
from .tools import knowledge_base, query, collections

mcp = FastMCP("Research Agent")

# Register tool modules
knowledge_base.register_tools(mcp)
query.register_tools(mcp)
collections.register_tools(mcp)
```

## Key MCP Tools (Implementation Guide)

**Essential Tools to Implement:**
- `query_knowledge_base` - Main search functionality (FR-RQ-003)
- `ingest_documents` - Folder-based document ingestion (FR-KB-001)
- `add_text_snippet` - Single text/file addition (FR-KB-003)
- `create_collection` - Collection management (FR-CM-001)
- `list_collections` - Collection enumeration (FR-CM-003)
- `reindex_collection` - Embedding model updates (FR-KB-005)

**Reference:** @reflow_prd.md sections 5.7, 7.2 for detailed specifications