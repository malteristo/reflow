---
description: Core project overview, technology stack, PRD compliance, and coding standards for the Research Agent.
globs: src/**/*.py, scripts/**/*.md
alwaysApply: true
---
# Research Agent: Project Standards

## Core Architecture Requirements

**✅ REQUIRED STACK:**
- **Backend CLI**: Python with `chromadb`, `sentence-transformers`, `typer`
- **MCP Server**: Python with `FastMCP` (`jlowin/fastmcp`)
- **Vector DB**: ChromaDB (default), SQLite+sqlite-vec (fallback)
- **Embeddings**: `sentence-transformers/multi-qa-MiniLM-L6-cos-v1` (default)
- **Re-ranking**: `cross-encoder/ms-marco-MiniLM-L6-v2`

**❌ AVOID:**
- Non-Python backends
- Non-FastMCP MCP implementations
- Embedding solutions without local options

## PRD Compliance

**Every implementation must:**
- Map to specific FR-XXX or ST-XXX requirements from `scripts/reflow_prd.md`
- State which requirement is being addressed
- Flag deviations for clarification

**Example:**
```python
# Implements FR-KB-002.1: Hybrid chunking strategy
def chunk_markdown_document(content: str) -> List[Chunk]:
    # Markdown-aware splitting by headers + recursive for prose
```

## Configuration Standards

**✅ DO:**
- Use `researchagent.config.json` for system settings
- Store API keys in `.env` files only
- Support local-first with team scalability design
- Include metadata fields: `user_id`, `team_id`, `access_permissions`

**❌ DON'T:**
- Hard-code configuration values
- Store secrets in config files
- Design single-user-only schemas

## Code Quality Requirements

**Python Backend (`src/research_agent_backend/`):**
```python
# ✅ Good: Clear docstrings, type hints, error handling
def query_knowledge_base(
    query: str, 
    collections: List[str],
    top_k: int = 10
) -> QueryResult:
    """Query collections with re-ranking.
    
    Implements FR-RQ-005, FR-RQ-008.
    """
    try:
        # Implementation
    except Exception as e:
        logger.error(f"Query failed: {e}")
        raise

# ❌ Avoid: No types, unclear purpose
def query(q, c):
    return db.search(q)
```

**MCP Server (`src/mcp_server/`):**
```python
# ✅ Good: FastMCP tool definition
@mcp.tool()
def search_knowledge(query: str, collections: str = None) -> dict:
    """Search knowledge base - implements FR-RQ-003."""
    # Structured response for Cursor AI
    return {"status": "success", "results": [...]}
```

## Development Workflow

**Before implementing:**
1. Identify relevant FR-XXX/ST-XXX from [reflow_prd.md](mdc:scripts/reflow_prd.md)
2. Check technology stack compliance
3. Design for local-first + future team scalability

**During implementation:**
- Add comprehensive docstrings
- Include error handling and logging
- Write modular, testable components
- Document any PRD deviations
- always identify the current development environment before installing dependencies (venv)
- always use `uv pip install` instead of `pip install` when installing dependencies (uv).

**Code organization:**
- Follow adaptive organizational principles from [file_organization.mdc](mdc:.cursor/rules/file_organization.mdc)
- Maintain separation between CLI backend (`src/research_agent_backend/`) and MCP server (`src/mcp_server/`)
- Organize by functional responsibility rather than rigid directory structure
- Extract modules when files exceed size thresholds (see [file_organization.mdc](mdc:.cursor/rules/file_organization.mdc))
- Document organizational decisions and emerging patterns

**Key organizational principles:**
- **CLI Layer**: Command interfaces and user-facing operations
- **Core Layer**: Business logic, RAG pipeline, vector operations
- **Service Layer**: External integrations and API services  
- **Model Layer**: Data structures and type definitions
- **Utils Layer**: Shared utilities and helper functions
- **Tests**: Mirror source structure, split when source modules split

## AI Assistant Guidelines

**When generating code:**
- State which PRD requirement you're implementing
- Use the specified technology stack
- Include proper error handling and logging
- Suggest improvements proactively
- Flag any technical trade-offs or deviations

**Reference files:** [reflow_prd.md](mdc:scripts/reflow_prd.md) for requirements validation

## Quality & Testing

- Follow rule creation guidelines in [.cursor/rules/cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc)