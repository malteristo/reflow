---
description: Core project overview, technology stack, PRD compliance, and coding standards for the Research Agent.
globs: src/**/*.py, scripts/**/*.md
alwaysApply: true
---
# Research Agent: Project Standards

## Core Architecture Requirements

**✅ REQUIRED STACK:**
- **Backend CLI**: Python with `chromadb`, `sentence-transformers`, `typer`
- **MCP Server**: Python with `FastMCP` (`jlowin/fastmcp`)
- **Vector DB**: ChromaDB (default), SQLite+sqlite-vec (fallback)
- **Embeddings**: `sentence-transformers/multi-qa-MiniLM-L6-cos-v1` (default)
- **Re-ranking**: `cross-encoder/ms-marco-MiniLM-L6-v2`

**❌ AVOID:**
- Non-Python backends
- Non-FastMCP MCP implementations
- Embedding solutions without local options

## PRD Compliance

**Every implementation must:**
- Map to specific FR-XXX or ST-XXX requirements from `scripts/reflow_prd.md`
- State which requirement is being addressed
- Flag deviations for clarification

**Example:**
```python
# Implements FR-KB-002.1: Hybrid chunking strategy
def chunk_markdown_document(content: str) -> List[Chunk]:
    # Markdown-aware splitting by headers + recursive for prose
```

## Configuration Standards

**✅ DO:**
- Use `researchagent.config.json` for system settings
- Store API keys in `.env` files only
- Support local-first with team scalability design
- Include metadata fields: `user_id`, `team_id`, `access_permissions`

**❌ DON'T:**
- Hard-code configuration values
- Store secrets in config files
- Design single-user-only schemas

## Code Quality Requirements

**Python Backend (`src/research_agent_backend/`):**
```python
# ✅ Good: Clear docstrings, type hints, error handling
def query_knowledge_base(
    query: str, 
    collections: List[str],
    top_k: int = 10
) -> QueryResult:
    """Query collections with re-ranking.
    
    Implements FR-RQ-005, FR-RQ-008.
    """
    try:
        # Implementation
    except Exception as e:
        logger.error(f"Query failed: {e}")
        raise

# ❌ Avoid: No types, unclear purpose
def query(q, c):
    return db.search(q)
```

**MCP Server (`src/mcp_server/`):**
```python
# ✅ Good: FastMCP tool definition
@mcp.tool()
def search_knowledge(query: str, collections: str = None) -> dict:
    """Search knowledge base - implements FR-RQ-003."""
    # Structured response for Cursor AI
    return {"status": "success", "results": [...]}
```

## Development Workflow

**Before implementing:**
1. Identify relevant FR-XXX/ST-XXX from [reflow_prd.md](mdc:scripts/reflow_prd.md)
2. Check technology stack compliance
3. Design for local-first + future team scalability

**During implementation:**
- Add comprehensive docstrings
- Include error handling and logging
- Write modular, testable components
- Document any PRD deviations

**Code organization:**
```
src/
├── research_agent_backend/              # Python CLI Backend (FR-SI-003)
│   ├── cli/                            # CLI Interface & Commands
│   │   ├── cli.py                      # Main CLI entry point with Typer
│   │   ├── kb_commands.py              # Knowledge base management commands
│   │   ├── collection_commands.py     # Collection management commands
│   │   ├── project_commands.py        # Project-specific operations
│   │   ├── query_commands.py          # Query execution commands
│   │   └── augmentation_commands.py   # Knowledge augmentation commands
│   ├── core/                          # Core Business Logic
│   │   ├── query_engine.py           # Main RAG pipeline implementation
│   │   ├── embeddings.py             # Embedding service abstractions
│   │   ├── document_processor.py     # Hybrid chunking & Markdown processing
│   │   ├── reranker.py               # Cross-encoder re-ranking service
│   │   ├── vector_store.py           # ChromaDB interface & operations
│   │   └── knowledge_gap_detector.py # Gap detection & external search
│   ├── services/                      # Service Layer
│   │   ├── embedding_service.py      # Local & API embedding implementations
│   │   ├── chunking_service.py       # Document chunking strategies
│   │   ├── search_service.py         # Vector search & retrieval
│   │   └── collection_service.py     # Collection management logic
│   ├── models/                        # Data Models & Types
│   │   ├── chunks.py                 # Chunk data structures
│   │   ├── queries.py                # Query request/response models
│   │   ├── collections.py            # Collection metadata models
│   │   └── results.py                # Search result data structures
│   ├── utils/                         # Utility Functions
│   │   ├── config.py                 # Configuration management
│   │   ├── logging_config.py         # Logging setup & configuration
│   │   ├── error_handling.py         # Custom exceptions & error handling
│   │   ├── result_formatter.py       # Result presentation & formatting
│   │   ├── model_migration.py        # Embedding model change detection
│   │   ├── caching.py                # Performance caching layer
│   │   └── performance_optimizer.py  # Performance optimizations
│   └── tests/                         # Backend Tests
│       ├── unit/                     # Unit tests for individual modules
│       ├── integration/              # Integration tests for workflows
│       └── fixtures/                 # Test data & sample documents
├── mcp_server/                        # FastMCP Server (FR-SI-001)
│   ├── mcp_server.py                 # Main FastMCP server implementation
│   ├── tools/                        # MCP Tool Definitions
│   │   ├── query_tools.py            # Knowledge querying tools
│   │   ├── collection_tools.py       # Collection management tools
│   │   ├── document_tools.py         # Document ingestion tools
│   │   └── augmentation_tools.py     # Knowledge augmentation tools
│   ├── handlers/                     # Request/Response Handlers
│   │   ├── cli_bridge.py             # CLI command execution bridge
│   │   ├── parameter_validator.py    # Input validation & sanitization
│   │   └── response_formatter.py     # Response formatting for Cursor
│   └── tests/                        # MCP Server Tests
│       ├── tool_tests/               # Individual tool tests
│       └── integration_tests/        # End-to-end MCP workflow tests
├── config/                           # Configuration Management
│   ├── schema/                       # Configuration schemas & validation
│   │   ├── config_schema.json        # Main config schema definition
│   │   └── migration_schemas/        # Schema migration definitions
│   ├── defaults/                     # Default configuration files
│   │   ├── default_config.json       # System defaults
│   │   └── model_defaults.json       # Model configuration defaults
│   └── validators/                   # Configuration validation logic
│       ├── config_validator.py       # Main config validation
│       └── migration_validator.py    # Migration validation
└── shared/                           # Shared Components
    ├── types/                        # Common type definitions
    │   ├── base_types.py             # Basic data types & enums
    │   └── protocol_types.py         # Protocol-specific types
    ├── constants/                    # System constants
    │   ├── models.py                 # Model names & configurations
    │   └── defaults.py               # Default values & settings
    └── exceptions/                   # Custom exception definitions
        ├── base_exceptions.py        # Base exception classes
        ├── config_exceptions.py      # Configuration-related exceptions
        └── search_exceptions.py      # Search & retrieval exceptions
```

## AI Assistant Guidelines

**When generating code:**
- State which PRD requirement you're implementing
- Use the specified technology stack
- Include proper error handling and logging
- Suggest improvements proactively
- Flag any technical trade-offs or deviations

**Reference files:** [reflow_prd.md](mdc:scripts/reflow_prd.md) for requirements validation

## Quality & Testing

- Follow rule creation guidelines in [.cursor/rules/cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc)